{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b644b49e.chunk.js","sourcesContent":["import React from 'react'\n\n// RAFC Boilerplate\nexport const Header = () => {\n    return (\n        <h2>\n          Expense Tracker  \n        </h2>\n    )\n}\n","// the bare minimum we need for our reducer\nexport default (state, action) => {\n    switch(action.type) { // this switched is based on the type which is basically like an id\n        case 'DELETE_TRANSACTION':\n        return {\n            ...state,\n            transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\n        }\n        case 'ADD_TRANSACTION':\n            return {\n                ...state,\n                transactions: [action.payload, ...state.transactions]\n            }\n        default:\n            return state; // when it's default, we simply want to return our state as is\n    }\n}","// we want createContext to create the context API we need, and useReducer because we need our usual reducer\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// Initial State - any global state would go in this object\n// In this case, all we need is transactions because as long as we have access to the transactions,\n// in certain components we can do our calculations (balance, etc.)\nconst initialState = {\n    transactions: []\n        // these were the  dummy transactions to test code (from VJS repo)\n        // expenses are negative, income is positive                   \n}\n\n// Create context\nexport const GlobalContext = createContext(initialState); // allows us to use in other files\n\n// In order for our other components to access the GlobalContext, we need what's called a 'provider'\n// We need to wrap all our components in the provider component\n\n// Provider component\n// we use destructuring for the children because the components we're wrapping are technically children \nexport const GlobalProvider = ({ children }) => { \n    // this is where we use the useReducer because we need access to the state and dispatch\n    // whenever we call a reducer action, we need to use the dispatch key\n    // useReducer then takes the file (which we haven't made yet) and the initialState\n    const[state, dispatch] = useReducer(AppReducer, initialState);\n    // This is our provider - it provides our state or any actions to the components that it's wrapped around\n\n    // Actions\n    function deleteTransaction(id) {\n        dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id\n        });\n    }\n\n    function addTransaction(transaction) {\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: transaction\n        });\n    }\n\n    return (<GlobalContext.Provider value={{\n        transactions: state.transactions, // this is how you access the initialState above (where our dummy code lives)\n        deleteTransaction,\n        addTransaction\n    }}>\n        {/* then we pass in the children prop */}\n        {children}\n    </GlobalContext.Provider>);\n}\n\n","import React, { useContext } from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const Balance = () => {\n    const { transactions } = useContext(GlobalContext);\n\n    const amounts = transactions.map(transaction => transaction.amount);\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n\n    return (\n        <>\n          <h4>Your Balance</h4>\n          <h1>${total}</h1>\n        </>\n    )\n}\n\n\n\n","import React, { useContext } from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\n\nexport const IncomeExpenses = () => {\n  const { transactions } = useContext(GlobalContext);\n\n  const amounts = transactions.map(transaction => transaction.amount);\n\n  const income = amounts\n    .filter(item => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2);\n\n  const expense = (\n    amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\n    -1\n  ).toFixed(2);\n  \n    return (\n        <div className=\"inc-exp-container\">\n        <div>\n          <h4>Income</h4>\n          <p className=\"money plus\">{income}</p>\n        </div>\n        <div>\n          <h4>Expense</h4>\n          <p className=\"money minus\">{expense}</p>\n        </div>\n      </div>\n    )\n}\n","import React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const Transaction = ({ transaction }) => {\n    const { deleteTransaction } = useContext(GlobalContext);\n\n    const sign = transaction.amount < 0 ? '-' : '+'; // to change the color depending on debit or credit\n\n    return (\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\n          {transaction.text} <span>{sign}${Math.abs(transaction.amount)}</span><button \n          onClick={() => deleteTransaction(transaction.id)} className=\"delete-btn\">x</button>\n        </li>\n    )\n}\n","import React, { useContext } from 'react'\nimport { Transaction } from './Transaction'\n\n\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const TransactionList = () => {\n    const { transactions } = useContext(GlobalContext); // this basically pulls in our dummy data to the component using the global context in GlobalState file\n\n    return (\n        <>\n        <h3>History</h3>\n        <ul className=\"list\">\n          {transactions.map(transaction => (<Transaction key={transaction.id} transaction={transaction} /> ))}\n        </ul>\n        </>\n    )\n}\n","import React, {useState, useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\n\nexport const AddTransaction = () => {\n    // Need to create a piece of state (text) then the function to manipulate that state (setText)\n    // Then set that to useState and add in what you want for a default argument ('')\n    // Then do the same for the amount\n    // Then we connect up to our input by using the value element and an onChange so that it updates to what we want\n    // Then you can check inside the components section of devTools to make sure that when you type\n    // something into the inputs that it's working\n    const [text, setText] = useState('');\n    const [amount, setAmount] = useState(0);\n\n    const { addTransaction } = useContext(GlobalContext);\n\n    const onSubmit = e => {\n      e.preventDefault();\n\n      const newTransaction = {\n        id: Math.floor(Math.random() * 100000000),\n        text,\n        amount: +amount\n      }\n\n      addTransaction(newTransaction);\n    }\n\n    return (\n        <>\n             <h3>Add new transaction</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-control\">\n          <label htmlFor=\"text\">Text</label>\n          <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} \n          placeholder=\"Enter text...\" />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"amount\"\n            >Amount <br />\n            (negative - expense, positive - income)</label\n          >\n          <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} placeholder=\"Enter amount...\" />\n        </div>\n        <button className=\"btn\">Add transaction</button>\n      </form>\n        </>\n    )\n}\n","import React from \"react\";\nimport { Header } from './components/Header'\nimport { Balance } from './components/Balance'\nimport { IncomeExpenses } from './components/IncomeExpenses'\nimport { TransactionList } from './components/TransactionList'\nimport { AddTransaction } from './components/AddTransaction'\n\nimport { GlobalProvider } from './context/GlobalState';\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n  <GlobalProvider>\n    <Header />\n    <div className=\"container\">\n      <Balance />\n      <IncomeExpenses />\n      <TransactionList />\n      <AddTransaction />\n    </div>\n  </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}